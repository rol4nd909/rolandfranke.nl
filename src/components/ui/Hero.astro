---
interface Props {
    class?: 'hero--large' | 'text-center' | 'hero--large text-center'
}

const { class: providedProps, ...rest } = Astro.props
---

<div class:list={['hero grid js-angle', providedProps]} {...rest}>
    <slot />
</div>

<script>
    import { setDiagonalAngle } from '@utils/diagonalAngle'

    setDiagonalAngle('js-angle')
</script>

<style>
    div {
        --_angle: calc(180 - var(--angle));

        position: relative;
        min-block-size: 50vh;
        isolation: isolate;

        &::before,
        &::after {
            content: '';
            z-index: -1;
            inset: 0;
            pointer-events: none;
            position: absolute;
        }

        &::before {
            --size: 3rem;
            --offset: calc(var(--size) / 2);
            --line: color-mix(in hsl, var(--text), var(--surface) 90%);

            background-image: linear-gradient(90deg, var(--line) 1px, transparent 1px var(--size)),
                linear-gradient(var(--line) 1px, transparent 1px var(--size));
            background-position: var(--offset) var(--offset);
            background-size: var(--size) var(--size);
            background-attachment: fixed;
        }

        &::after {
            background-image: linear-gradient(
                calc(var(--_angle) * -1deg),
                var(--surface) 40%,
                transparent
            );
        }

        &.hero--large {
            align-content: center;
            row-gap: utopia.clamp(16, 32);
            min-block-size: 100svh;
            padding-block: var(--header-height);
        }

        &:has(> :only-child) {
            padding-block: 0;

            :global(> :only-child) {
                padding-block: var(--header-height);
                align-content: end;
                max-inline-size: calc(var(--constrain-sm) + 3rem);

                .hero--large & {
                    row-gap: inherit;
                }
            }
        }
    }
</style>
