---
import BaseLayout from '@/layouts/BaseLayout.astro'
import Badge from '@/components/ui/Badge.astro'
import FadeOutDown from '@/components/ui/FadeOutDown.astro'
import FormattedDate from '@/components/ui/FormattedDate.astro'
import Hero from '@/components/ui/Hero.astro'

import type { GetStaticPaths } from 'astro'
import { getCollection } from 'astro:content'
import { getEntries } from 'astro:content'

export const getStaticPaths = (async () => {
    const posts = await getCollection('posts', ({ data }) => !data.isDraft)

    return posts.map((post) => ({
        params: {
            slug: post.slug,
        },
        props: {
            post,
        },
    }))
}) satisfies GetStaticPaths

const { post } = Astro.props
const { Content } = await post.render()
const { title, description, image, pubDate, tags } = post.data
const tagsData = await getEntries(tags)
---

<BaseLayout {title} {description}>
    <Hero slot="hero">
        <FadeOutDown class="hero__animation">
            <h1 set:html={title} />
            <FormattedDate {pubDate} />
            <!-- <small>Updated <time>October 18, 2024</time></small> -->
            <!-- <span class="read-time">
                <svg aria-hidden="true" class="filled-icon" width="20" height="20" viewBox="0 0 24 24">
                    <use href="#icon.clock"></use>
                </svg>9 min read
            </span> -->
            <div class="flex inline-wrap">
                {tagsData.map(({ id, data }) => <Badge label={data.title} id={id} />)}
            </div>
        </FadeOutDown>
    </Hero>

    <div class="grid lane lane--light" data-grid="fullbleed">
        <div class="prose flow">
            <Content />
        </div>
    </div>
</BaseLayout>

<style>
    h1 {
        font-size: var(--fs-5);
    }

    .prose {
        grid-column: xsmall;
    }
</style>
