<button
    class="theme-toggle"
    title="Toggles light & dark"
    aria-label="auto"
    aria-live="polite"
    id="themeToggle"
>
    <svg class="sun-and-moon" aria-hidden="true" width="24" height="24" viewBox="0 0 24 24">
        <mask class="moon" id="moon-mask">
            <rect x="0" y="0" width="100%" height="100%" fill="white"></rect>
            <circle cx="0" cy="10" r="6" fill="black"></circle>
        </mask>

        <circle class="sun" cx="12" cy="12" r="6" mask="url(#moon-mask)" fill="currentColor"
        ></circle>
        <g class="sun-beams" stroke="currentColor">
            <line x1="12" y1="1" x2="12" y2="3"></line>
            <line x1="12" y1="21" x2="12" y2="23"></line>
            <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
            <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
            <line x1="1" y1="12" x2="3" y2="12"></line>
            <line x1="21" y1="12" x2="23" y2="12"></line>
            <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
            <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
        </g>
    </svg>
</button>

<script is:inline>
    const storageKey = 'theme-preference'

    const toggleTheme = () => {
        // flip current value
        theme.value = theme.value === 'light' ? 'dark' : 'light'

        setPreference()
    }

    const onClick = () => {
        if (document.startViewTransition) {
            document.startViewTransition(toggleTheme)
        } else {
            toggleTheme()
        }
    }

    const getColorPreference = () => {
        if (localStorage.getItem(storageKey)) return localStorage.getItem(storageKey)
        else return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'
    }

    const setPreference = () => {
        localStorage.setItem(storageKey, theme.value)
        reflectPreference()
    }

    const reflectPreference = () => {
        document.firstElementChild.setAttribute('color-scheme', theme.value)

        themeToggle?.setAttribute('aria-label', theme.value)
    }

    const theme = {
        value: getColorPreference(),
    }

    // set early so no page flashes / CSS is made aware
    reflectPreference()

    window.onload = () => {
        // set on load so screen readers can see latest value on the button
        reflectPreference()

        // now this script can find and listen for clicks on the control
        themeToggle.addEventListener('click', onClick)
    }

    // sync with system changes
    window
        .matchMedia('(prefers-color-scheme: dark)')
        .addEventListener('change', ({ matches: isDark }) => {
            theme.value = isDark ? 'dark' : 'light'
            setPreference()
        })
</script>

<style>
    .theme-toggle {
        --size: 3rem;
        --icon-fill: currentColor;

        background: none;
        border: none;
        padding: 0.5rem;
        inline-size: var(--size);
        block-size: var(--size);
        aspect-ratio: 1;
        border-radius: 50%;
        cursor: pointer;
        touch-action: manipulation;
        -webkit-tap-highlight-color: transparent;
        outline-offset: 0.25rem;
        outline-color: currentColor;
        color: inherit;

        & > svg {
            inline-size: 100%;
            block-size: 100%;
            stroke-linecap: round;
            transition: color 0.5s calc(var(--toggle-delay) / 2) var(--ease);
        }
    }

    :global([nojs]) {
        & .theme-toggle {
            display: none;
        }
    }

    .sun-and-moon {
        & > :is(.moon, .sun, .sun-beams) {
            transform-origin: center center;
        }

        & > :is(.moon, .sun) {
            fill: var(--icon-fill);
        }

        & > .sun-beams {
            stroke: var(--icon-fill);
            stroke-width: 0.125rem;
        }

        @media (--motion-ok) {
            & > .sun {
                transition: transform 0.5s var(--ease-elastic-1);
                transition-delay: var(--toggle-delay);
            }

            & > .sun-beams {
                transition:
                    transform 0.5s var(--ease-elastic-2),
                    opacity 0.5s var(--ease);
                transition-delay: var(--toggle-delay);
            }

            & > .moon > circle {
                transition: transform 0.25s var(--ease-out);
                transition-delay: var(--toggle-delay);

                @supports (cx: 1) {
                    transition:
                        cx 0.25s var(--ease-out),
                        fill 1s var(--ease);
                    transition-delay: var(--toggle-delay);
                }
            }
        }
    }

    [color-scheme='light'] {
        .sun-and-moon {
            & > .sun {
                transform: scale(1.75);
            }

            & > .sun-beams {
                opacity: 0;
            }

            & > .moon > circle {
                transform: translateX(7px);

                @supports (cx: 1) {
                    transform: translateX(0);
                    cx: 7;
                }
            }

            @media (--motion-ok) {
                & > .sun {
                    transform: scale(1.75);
                    transition-timing-function: var(--ease);
                    transition-duration: 0.25s;
                    transition-delay: var(--toggle-delay);
                }

                & > .sun-beams {
                    transform: rotateZ(-25deg);
                    transition-duration: 0.15s;
                    transition-delay: var(--toggle-delay);
                }

                & > .moon > circle {
                    transition-duration: 0.5s;
                    transition-delay: calc(var(--toggle-delay) + 0.25s);
                }
            }
        }
    }

    /* VIEW TRANSITION ANIMATION */
    @media (--motion-ok) {
        :global(::view-transition-new(root)) {
            animation: reveal 1s var(--ease);
            clip-path: inset(0 0 0 0);

            /* animation: 2.5s cubic-bezier(0.25, 1, 0.3, 1) circle-in-top-right forwards; */
        }

        :global(::view-transition-old(root)) {
            animation: none;
        }
    }

    @keyframes reveal {
        from {
            clip-path: inset(var(--from));
        }
    }

    /* @keyframes circle-in-top-right {
        from {
            clip-path: circle(0%);
        }
        to {
            clip-path: circle(150% at top right);
        }
    } */

    @supports selector(::view-transition-old(root)) {
        html:global([color-scheme='light']) {
            --from: 100% 0 0 0;
            --toggle-delay: 0.4s;
        }

        html:global([color-scheme='dark']) {
            --from: 0 0 100% 0;
            --toggle-delay: 0.15s;
        }
    }
</style>
