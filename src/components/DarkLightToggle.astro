<button class="js-theme-toggle" title="Toggle dark mode" aria-pressed="false">
    <svg aria-hidden="true" width="24" height="24" viewBox="0 0 24 24">
        <mask id="moon-mask">
            <rect x="0" y="0" width="100%" height="100%" fill="white"></rect>
            <circle cx="0" cy="10" r="6" fill="black"></circle>
        </mask>

        <circle cx="12" cy="12" r="6" mask="url(#moon-mask)" fill="currentColor"></circle>

        <g stroke="currentColor">
            <line x1="12" y1="1" x2="12" y2="3"></line>
            <line x1="12" y1="21" x2="12" y2="23"></line>
            <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
            <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
            <line x1="1" y1="12" x2="3" y2="12"></line>
            <line x1="21" y1="12" x2="23" y2="12"></line>
            <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
            <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
        </g>
    </svg>
</button>

<script>
    const storageKey = 'color-preference'

    const onClick = () => {
        // flip current value
        theme.value = theme.value === 'light' ? 'dark' : 'light'

        setPreference()
    }

    const getColorPreference = () => {
        if (localStorage.getItem(storageKey)) {
            return localStorage.getItem(storageKey) || ''
        } else {
            return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light'
        }
    }

    const setPreference = () => {
        localStorage.setItem(storageKey, theme.value)

        reflectPreference()
    }

    const reflectPreference = () => {
        const pressed = theme.value === 'dark' ? 'true' : 'false'

        document.documentElement.style.setProperty('color-scheme', theme.value)
        document.firstElementChild?.setAttribute('color-scheme', theme.value)
        document.querySelector('.js-theme-toggle')?.setAttribute('aria-pressed', pressed)
    }

    const theme = {
        value: getColorPreference(),
    }

    // set early so no page flashes / CSS is made aware
    reflectPreference()

    window.onload = () => {
        // set on load so screen readers can see latest value on the button
        reflectPreference()

        // now this script can find and listen for clicks on the control
        document.querySelector('.js-theme-toggle')?.addEventListener('click', onClick)
    }

    // sync with system changes
    window
        .matchMedia('(prefers-color-scheme: dark)')
        .addEventListener('change', ({ matches: isDark }) => {
            theme.value = isDark ? 'dark' : 'light'
            setPreference()
        })
</script>

<style>
    button {
        --size: 3rem;
        --icon-fill: currentcolor;

        padding: 0.5rem;
        border: none;
        background: none;
        inline-size: var(--size);
        block-size: var(--size);
        aspect-ratio: 1;
        border-radius: 50%;
        cursor: pointer;
        touch-action: manipulation;
        -webkit-tap-highlight-color: transparent;
        outline-offset: 0.25rem;
        color: inherit;
    }

    svg {
        inline-size: 100%;
        block-size: 100%;
        stroke-linecap: round;

        & > :is(mask, circle, g) {
            transform-origin: center center;
        }

        & > :is(mask, circle) {
            fill: var(--icon-fill);
        }

        & > g {
            stroke: var(--icon-fill);
            stroke-width: 0.125rem;
        }

        /* :global([color-scheme='dark']) & {
            & > circle {
                transform: scale(1.75);
            }

            & > g {
                opacity: 0;
            }

            & > mask > circle {
                transform: translateX(7px);

                @supports (cx: 1) {
                    transform: translateX(0);
                    cx: 7;
                }
            }
        } */

        /* @media (--motion-ok) {
            & > circle {
                transition:
                    transform 0.5s var(--ease-elastic-3),
                    fill 0.25s var(--ease-3);
            }

            & > g {
                transition:
                    transform 0.5s var(--ease-elastic-4),
                    opacity 0.5s var(--ease-3),
                    stroke 0.25s var(--ease-3);
            }

            mask > circle {
                transition: transform 0.25s var(--ease-out-5);

                @supports (cx: 1) {
                    transition: cx 0.25s var(--ease-out-5);
                }
            }

            :global([color-scheme='dark']) & {
                & > circle {
                    transform: scale(1.75);
                    transition-timing-function: var(--ease-3);
                    transition-duration: 0.25s;
                }

                & > g {
                    transform: rotateZ(-25deg);
                    transition-duration: 0.15s;
                }

                & > mask > circle {
                    transition-delay: 0.25s;
                    transition-duration: 0.5s;
                }
            }
        } */
    }

    :global([color-scheme='light'] svg) {
        & > circle {
            transform: scale(1.75);
        }

        & > g {
            opacity: 0;
        }

        & > mask > circle {
            transform: translateX(7px);

            @supports (cx: 1) {
                transform: translateX(0);
                cx: 7;
            }
        }
    }

    @media (prefers-reduced-motion: no-preference) {
        svg {
            & > circle {
                transition:
                    transform 0.5s var(--ease-elastic-3),
                    fill 0.25s var(--ease-3);
            }

            & > g {
                transition:
                    transform 0.5s var(--ease-elastic-4),
                    opacity 0.5s var(--ease-3),
                    stroke 0.25s var(--ease-3);
            }

            mask > circle {
                transition: transform 0.25s var(--ease-out-5);

                @supports (cx: 1) {
                    transition: cx 0.25s var(--ease-out-5);
                }
            }
        }

        :global([color-scheme='light'] svg) {
            & > circle {
                transform: scale(1.75);
                transition-timing-function: var(--ease-3);
                transition-duration: 0.25s;
            }

            & > g {
                transform: rotateZ(-25deg);
                transition-duration: 0.15s;
            }

            & > mask circle {
                transition-delay: 0.25s;
                transition-duration: 0.5s;
            }
        }
    }
</style>
